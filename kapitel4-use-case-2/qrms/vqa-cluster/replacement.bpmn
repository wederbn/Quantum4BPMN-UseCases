<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" id="Definitions_0b7il2s" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20220627">
  <bpmn:process id="Process_03tgi13" isExecutable="true">
    <bpmn:serviceTask id="ServiceTask_1d6l6i7" name="SchwÃ¤che&#10;Fehler ab">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://error-mitigation-service:5071/rem/</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="Groovy">import groovy.json.JsonBuilder
def qpu = execution.getVariable("qpu");
def token = execution.getVariable("quantum_token_ibmq");
def hub= execution.getVariable("hub");
def group = execution.getVariable("group");
def url = execution.getVariable("ibmqUrl");
def project = execution.getVariable("project");
def maxAge = execution.getVariable("maxAge");
def provider = execution.getVariable("provider");
def measQubits = execution.getVariable("measQubits");
println("Measured qubits:");
println(measQubits);
def noiseModel = execution.getVariable("noiseModel");
def onlyMeasurementErrors = execution.getVariable("onlyMeasurementErrors");
def counts = execution.getVariable("counts");
println("Counts to mitigate:");
println(counts);
def calibrationMethod = execution.getVariable("calibrationMethod");
println("Calibration method:");
println(calibrationMethod);
def mitigationMethod = execution.getVariable("mitigationMethod");
println("Mitigation method:");
println(mitigationMethod);

println("Building mitigation request...");
def credentials = [:];
credentials.put("token", token);
credentials.put("hub", "ibm-q");
credentials.put("group", "open")
credentials.put("project", "main");
credentials.put("url", "https://auth.quantum-computing.ibm.com/api");
def request = [:];
request.put("credentials", credentials);
request.put("counts", counts);
request.put("mitigation_method", mitigationMethod)
request.put("cm_gen_method", calibrationMethod);
request.put("qpu", qpu);
request.put("qubits", measQubits);
request.put("max_age", maxAge);
request.put("provider", provider);
request.put("noise_model", noiseModel);
request.put("only_measurement_errors", onlyMeasurementErrors);
println("Mitigation request created...");

requeststring = new JsonBuilder(request).toPrettyString()
println(requeststring);
return requeststring;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="mitigatedCounts">
              <camunda:script scriptFormat="JavaScript">//${S(response)}

var resp = connector.getVariable("response")
var result = S(resp);
result;</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
    </bpmn:serviceTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_03tgi13">
      <bpmndi:BPMNShape id="ServiceTask_1d6l6i7_di" bpmnElement="ServiceTask_1d6l6i7">
        <dc:Bounds x="160" y="80" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>
