<?xml version="1.0" encoding="UTF-8"?>
<bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" xmlns:quantme="https://github.com/UST-QuAntiL/QuantME-Quantum4BPMN" id="sample-diagram" targetNamespace="http://bpmn.io/schema/bpmn" xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL BPMN20.xsd">
  <bpmn2:process id="Process_1" isExecutable="true">
    <bpmn2:startEvent id="Event_0a9vpcu" camunda:asyncAfter="true" camunda:exclusive="false">
      <bpmn2:extensionElements>
        <camunda:formData>
          <camunda:formField id="trucksUrl" label="Url to file containing trucks" type="string" defaultValue="https://raw.githubusercontent.com/wederbn/Quantum4BPMN-UseCases/main/kapitel8-use-case-4/data/trucks.txt" />
          <camunda:formField id="packagesUrl" label="Url to file containing packages" type="string" defaultValue="https://raw.githubusercontent.com/wederbn/Quantum4BPMN-UseCases/main/kapitel8-use-case-4/data/packages_small.txt" />
          <camunda:formField id="awsToken" label="AWS Token for Maps API" type="string" defaultValue="YOUR_TOKEN" />
        </camunda:formData>
      </bpmn2:extensionElements>
      <bpmn2:outgoing>Flow_036tksd</bpmn2:outgoing>
    </bpmn2:startEvent>
    <bpmn2:endEvent id="Event_1pggtyp">
      <bpmn2:incoming>Flow_19sigyl</bpmn2:incoming>
    </bpmn2:endEvent>
    <bpmn2:scriptTask id="Activity_1wtxplz" name="Bearbeite Bestellungen" scriptFormat="groovy">
      <bpmn2:incoming>Flow_036tksd</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0k45o2v</bpmn2:outgoing>
      <bpmn2:script>def packagesUrl = execution.getVariable("packagesUrl");
  def packageString = new URL (packagesUrl).getText();
  def packages = []
  def destinations = []

  packageString.split("\\n").each { p -&gt;
    def packageValues = [:]
    def values = p.split(",")
    packageValues.put("destination", values[0])
    packageValues.put("id", values[1])
    packageValues.put("size", values[2].toInteger())
    packageValues.put("deliveryDate", values[3])
    packages.add(packageValues)

    println("Searching for destination: " + values[0]);
    def destination = destinations.stream().find{ it.name == values[0] }
    println(destination);
    if (!destination){
      println("Destination not found, adding new destination...");
      destination= [:]
      destination.put("name", values[0])
      def packagesForDestination = []
      packagesForDestination.add(packageValues)
      destination.put("packages", packagesForDestination)
      destinations.add(destination)
    } else {
      println("Adding package to existing destination...");
      destination.packages.add(packageValues)
    }
  }
  println(packages);
  println(destinations)
  execution.setVariable("destinations", destinations);
  execution.setVariable("packages", packages);
  execution.setVariable("nextDestinations", [destinations.getClass().newInstance(destinations)]);</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="Flow_036tksd" sourceRef="Event_0a9vpcu" targetRef="Activity_1wtxplz" />
    <bpmn2:scriptTask id="Activity_0ym5a6k" name="Überprüfe&#10;Fahrer/LKWs" scriptFormat="groovy">
      <bpmn2:incoming>Flow_0k45o2v</bpmn2:incoming>
      <bpmn2:outgoing>Flow_1o0job9</bpmn2:outgoing>
      <bpmn2:script>def trucksUrl = execution.getVariable("trucksUrl");
  def destinations = execution.getVariable("destinations");
  def trucksString = new URL (trucksUrl).getText();

  def trucks = []
  trucksString.split("\\n").each { p -&gt;
    def truckValues = [:]
    def values = p.split(",")
    truckValues.put("driver", values[0])
    truckValues.put("capacity", values[1].toInteger())
    truckValues.put("location", values[2])
    truckValues.put("email", values[3])
    trucks.add(truckValues)

    if (!destinations.stream().find{ it.name == values[2] }){      
      def destination= [:]
      destination.put("name", values[2])
      destination.put("packages", [])
      destinations.add(destination)
    }
  }

  execution.setVariable("trucks", trucks);
  execution.setVariable("allCities", destinations);
  execution.setVariable("unassignedTrucks", trucks);</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="Flow_0k45o2v" sourceRef="Activity_1wtxplz" targetRef="Activity_0ym5a6k" />
    <bpmn2:serviceTask id="Activity_1l4kmzj" name="Berechne&#10;Distanzen" camunda:asyncBefore="true" camunda:asyncAfter="true" camunda:exclusive="false">
      <bpmn2:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://distance-matrix:8101/useCaseDistanceMatrix</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="groovy">import groovy.json.JsonBuilder
def allCities = execution.getVariable("allCities");
  def aws_token = execution.getVariable("awsToken");

  def request = [:];
  request.put("towns", allCities.collect{ it.name });
  request.put("token", aws_token);
  requeststring = new JsonBuilder(request).toPrettyString()
print(requeststring)
  return requeststring;</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="distanceMatrix">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
distanceMatrix= resp.get('distanceMatrix')
println(distanceMatrix);
return distanceMatrix;</camunda:script>
            </camunda:outputParameter>
            <camunda:outputParameter name="durationMatrix">
              <camunda:script scriptFormat="groovy">
def resp = connector.getVariable("response");
resp = new groovy.json.JsonSlurper().parseText(resp)
durationMatrix= resp.get('durationMatrix')
println(durationMatrix);
return durationMatrix;</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn2:extensionElements>
      <bpmn2:incoming>Flow_1o0job9</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0pqisjm</bpmn2:outgoing>
    </bpmn2:serviceTask>
    <bpmn2:sequenceFlow id="Flow_1o0job9" sourceRef="Activity_0ym5a6k" targetRef="Activity_1l4kmzj" />
    <bpmn2:scriptTask id="Activity_1almfwy" name="Lade&#10;Teilgraph" scriptFormat="groovy">
      <bpmn2:incoming>Flow_164r496</bpmn2:incoming>
      <bpmn2:outgoing>Flow_1uk996u</bpmn2:outgoing>
      <bpmn2:script>  def nextDestinations = execution.getVariable("nextDestinations");
  execution.setVariable("currentDestinations", nextDestinations[0].getClass().newInstance(nextDestinations[0]));</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:userTask id="Activity_1s3b1zn" name="Analysiere Routen">
      <bpmn2:extensionElements>
        <camunda:formData>
          <camunda:formField id="allRoutes" label="Resulting Routes" type="string" />
        </camunda:formData>
      </bpmn2:extensionElements>
      <bpmn2:incoming>Flow_1lgu2v0</bpmn2:incoming>
      <bpmn2:outgoing>Flow_19sigyl</bpmn2:outgoing>
    </bpmn2:userTask>
    <bpmn2:sequenceFlow id="Flow_19sigyl" sourceRef="Activity_1s3b1zn" targetRef="Event_1pggtyp" />
    <bpmn2:scriptTask id="Activity_0yyvfyd" name="Überprüfe ob ein LKW ausreicht" scriptFormat="groovy">
      <bpmn2:incoming>Flow_1uk996u</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0ey4t8g</bpmn2:outgoing>
      <bpmn2:script>  def unassignedTrucks = execution.getVariable("unassignedTrucks");
  def packages  = execution.getVariable("packages");
  def currentDestinations = execution.getVariable("currentDestinations");

  def maxCapacity = 0;
  unassignedTrucks.each { truck -&gt;
    if (truck.get('capacity') &gt; maxCapacity) {
      maxCapacity = truck.get('capacity');
    }
  }

  def totalSize = 0;
  packages.each { p -&gt;
    if(currentDestinations.stream().find{ it.name == p.get('destination') }) {
      totalSize += p.get('size');
    }
  }
print("Total size: " + totalSize)

  execution.setVariable("allFitsInTruck", totalSize &lt; maxCapacity);</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="Flow_0ey4t8g" sourceRef="Activity_0yyvfyd" targetRef="Gateway_1thnudz" />
    <bpmn2:sequenceFlow id="Flow_1uk996u" sourceRef="Activity_1almfwy" targetRef="Activity_0yyvfyd" />
    <bpmn2:exclusiveGateway id="Gateway_13m9t4g" name="Weitere&#10;Teilgraphen &#38;&#10;LKW?">
      <bpmn2:incoming>Flow_08svt2n</bpmn2:incoming>
      <bpmn2:outgoing>Flow_1lgu2v0</bpmn2:outgoing>
      <bpmn2:outgoing>Flow_1mglfkn</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="Flow_1lgu2v0" name="Nein" sourceRef="Gateway_13m9t4g" targetRef="Activity_1s3b1zn">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" language="groovy">  def unassignedTrucks = execution.getVariable("unassignedTrucks");
  def nextDestinations= execution.getVariable("nextDestinations");
  return !(unassignedTrucks.size() &gt; 0 &amp;&amp; nextDestinations.size() &gt; 0)</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:exclusiveGateway id="Gateway_10itye2">
      <bpmn2:incoming>Flow_1mglfkn</bpmn2:incoming>
      <bpmn2:incoming>Flow_0kiekyo</bpmn2:incoming>
      <bpmn2:outgoing>Flow_03ixpie</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="Flow_1mglfkn" name="Ja" sourceRef="Gateway_13m9t4g" targetRef="Gateway_10itye2">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" language="groovy">  def unassignedTrucks = execution.getVariable("unassignedTrucks");
  def nextDestinations= execution.getVariable("nextDestinations");
  return (unassignedTrucks.size() &gt; 0 &amp;&amp; nextDestinations.size() &gt; 0)</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:exclusiveGateway id="Gateway_1msdcd8">
      <bpmn2:incoming>Flow_0pqisjm</bpmn2:incoming>
      <bpmn2:incoming>Flow_03ixpie</bpmn2:incoming>
      <bpmn2:outgoing>Flow_164r496</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="Flow_164r496" sourceRef="Gateway_1msdcd8" targetRef="Activity_1almfwy" />
    <bpmn2:sequenceFlow id="Flow_0pqisjm" sourceRef="Activity_1l4kmzj" targetRef="Gateway_1msdcd8" />
    <bpmn2:sequenceFlow id="Flow_03ixpie" sourceRef="Gateway_10itye2" targetRef="Gateway_1msdcd8" />
    <bpmn2:exclusiveGateway id="Gateway_1thnudz" name="Ein LKW genügt?">
      <bpmn2:incoming>Flow_0ey4t8g</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0wg476a</bpmn2:outgoing>
      <bpmn2:outgoing>Flow_1d4o5uw</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="Flow_0wg476a" name="Ja" sourceRef="Gateway_1thnudz" targetRef="Gateway_13ii4j4">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression">${ execution.getVariable('allFitsInTruck')!= null &amp;&amp; execution.getVariable('allFitsInTruck') == 'true'}</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:exclusiveGateway id="Gateway_13ii4j4">
      <bpmn2:incoming>Flow_0wg476a</bpmn2:incoming>
      <bpmn2:incoming>Flow_10t3293</bpmn2:incoming>
      <bpmn2:outgoing>Flow_1m1hkm4</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:exclusiveGateway id="Gateway_0hhp0bd" name="&#62; 1 LKW verfügbar?">
      <bpmn2:incoming>Flow_1d4o5uw</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0awxqtp</bpmn2:outgoing>
      <bpmn2:outgoing>Flow_1k013oe</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="Flow_1d4o5uw" name="Nein" sourceRef="Gateway_1thnudz" targetRef="Gateway_0hhp0bd">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression">${ execution.getVariable('allFitsInTruck')== null || execution.getVariable('allFitsInTruck') == 'false'}</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_0awxqtp" name="Ja" sourceRef="Gateway_0hhp0bd" targetRef="Activity_1eml1us">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" language="groovy">  def unassignedTrucks = execution.getVariable("unassignedTrucks");
  def currentDestinations = execution.getVariable("currentDestinations");
  return unassignedTrucks.size() &gt; 1 &amp;&amp; currentDestinations.size() &gt; 1</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_1k013oe" name="Nein" sourceRef="Gateway_0hhp0bd" targetRef="QuantumComputationTask_1ye1vc6">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" language="groovy">  def unassignedTrucks = execution.getVariable("unassignedTrucks");
  def currentDestinations = execution.getVariable("currentDestinations");
  return !(unassignedTrucks.size() &gt; 1 &amp;&amp; currentDestinations.size() &gt; 1)</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="Flow_08svt2n" sourceRef="Activity_0vk7g32" targetRef="Gateway_13m9t4g" />
    <bpmn2:scriptTask id="Activity_0vk7g32" name="Informiere Fahrer" scriptFormat="groovy">
      <bpmn2:incoming>Flow_0t1933o</bpmn2:incoming>
      <bpmn2:outgoing>Flow_08svt2n</bpmn2:outgoing>
      <bpmn2:script>def unassignedTrucks = execution.getVariable("unassignedTrucks");
def nextDestinations = execution.getVariable("nextDestinations");
def currentRoute= execution.getVariable("currentRoute");
def allRoutes= execution.getVariable("allRoutes");

println(unassignedTrucks[0].get('driver')+' on route' + currentRoute.inspect());

if(allRoutes == null){
  allRoutes = [];
}

this_route =[:]
this_route.put("route", currentRoute.getClass().newInstance(currentRoute));
this_route.put("driver", unassignedTrucks[0].getClass().newInstance(unassignedTrucks[0]));
allRoutes.push(this_route);

nextDestinations.removeAt(0);
unassignedTrucks.removeAt(0);

execution.setVariable("allRoutes", allRoutes);
execution.setVariable("nextDestinations", nextDestinations);
execution.setVariable("unassignedTrucks", unassignedTrucks);
</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="Flow_0kiekyo" sourceRef="Activity_17231t1" targetRef="Gateway_10itye2" />
    <bpmn2:scriptTask id="Activity_17231t1" name="Erstelle neue Teilgraphen" camunda:asyncBefore="true" camunda:asyncAfter="true" camunda:exclusive="false" scriptFormat="groovy">
      <bpmn2:incoming>Flow_1gu7ma8</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0kiekyo</bpmn2:outgoing>
      <bpmn2:script>  def currentDestinations = execution.getVariable("currentDestinations");
  def nextDestinations = execution.getVariable("nextDestinations");
  def evaluatedCosts = execution.getVariable("evaluatedCosts");
println(nextDestinations);

  evaluatedCosts = evaluatedCosts[0].get("bitstring");
println(evaluatedCosts);

  def cities_with_zero =[];
  def cities_with_one =[];
  evaluatedCosts.toCharArray().eachWithIndex { c, index -&gt;
    (c == '0') ? cities_with_zero.push(currentDestinations[index]) : cities_with_one.push(currentDestinations[index]);
  }
if (cities_with_zero.size()==0 || cities_with_one.size()==0) {
  nextDestinations.push(currentDestinations[0..((int)(currentDestinations.size()/2))-1]);
          nextDestinations.push(currentDestinations[((int)(currentDestinations.size()/2))..currentDestinations.size()-1]);
} else {
  nextDestinations.push(cities_with_zero);
  nextDestinations.push(cities_with_one);
}
println(nextDestinations);

  nextDestinations.removeAt(0);
  println(nextDestinations);

 execution.setVariable("nextDestinations", nextDestinations);</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="Flow_1m1hkm4" sourceRef="Gateway_13ii4j4" targetRef="Activity_0flh63m" />
    <bpmn2:sequenceFlow id="Flow_0t1933o" sourceRef="Activity_0flh63m" targetRef="Activity_0vk7g32" />
    <quantme:quantumComputationTask id="Activity_0flh63m" name="Berechne Route (TSP)" algorithm="TSP" provider="ibm">
      <bpmn2:incoming>Flow_1m1hkm4</bpmn2:incoming>
      <bpmn2:outgoing>Flow_0t1933o</bpmn2:outgoing>
    </quantme:quantumComputationTask>
    <bpmn2:sequenceFlow id="Flow_1gu7ma8" sourceRef="Activity_0wsvbf1" targetRef="Activity_17231t1" />
    <quantme:quantumComputationTask id="Activity_0wsvbf1" name="Teile Graph (MaxCut)" algorithm="MaxCut" provider="ibm">
      <bpmn2:extensionElements>
        <camunda:inputOutput>
          <camunda:inputParameter name="betas">[1]</camunda:inputParameter>
          <camunda:inputParameter name="gammas">[1]</camunda:inputParameter>
          <camunda:inputParameter name="token">YOUR_TOKEN</camunda:inputParameter>
        </camunda:inputOutput>
      </bpmn2:extensionElements>
      <bpmn2:incoming>Flow_12pjp7k</bpmn2:incoming>
      <bpmn2:outgoing>Flow_1gu7ma8</bpmn2:outgoing>
    </quantme:quantumComputationTask>
    <bpmn2:scriptTask id="Activity_1eml1us" name="Bereite Daten vor" camunda:asyncBefore="true" camunda:asyncAfter="true" scriptFormat="groovy">
      <bpmn2:incoming>Flow_0awxqtp</bpmn2:incoming>
      <bpmn2:outgoing>Flow_12pjp7k</bpmn2:outgoing>
      <bpmn2:script>  def allCities = execution.getVariable("allCities");
  def currentDestinations = execution.getVariable("currentDestinations");
  def distanceMatrix = execution.getVariable("distanceMatrix");
  def durationMatrix = execution.getVariable("durationMatrix");

  def requiredIndizes = []
  for (def i in 0..allCities.size()-1) {
    if (currentDestinations.contains(allCities[i])){
      requiredIndizes.push(i)
    }
  }

  def submatrixOfDistanceMatrix = new Integer [requiredIndizes.size()] [requiredIndizes.size()];
  def submatrixOfDurationMatrix = new Float [requiredIndizes.size()] [requiredIndizes.size()];
  for (def i in 0..requiredIndizes.size()-1) {
    submatrixOfDistanceMatrix [i][i] = 0;
    submatrixOfDurationMatrix [i][i] = 0.0;
    for (def j in i+1..requiredIndizes.size()-1) {
      if (j &lt; requiredIndizes.size()){
        submatrixOfDistanceMatrix [i][j] = distanceMatrix[requiredIndizes[i]][requiredIndizes[j]];
        submatrixOfDistanceMatrix [j][i] = distanceMatrix[requiredIndizes[j]][requiredIndizes[i]];
        submatrixOfDurationMatrix [j][i] = durationMatrix[requiredIndizes[j]][requiredIndizes[i]];
        submatrixOfDurationMatrix [j][i] = durationMatrix[requiredIndizes[j]][requiredIndizes[i]];
      }
    }
  }
println(submatrixOfDistanceMatrix);
  // switch between distance and duration depending on reqs
  execution.setVariable("adjMatrix", submatrixOfDistanceMatrix);</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="Flow_12pjp7k" sourceRef="Activity_1eml1us" targetRef="Activity_0wsvbf1" />
    <quantme:quantumComputationTask id="QuantumComputationTask_1ye1vc6" name="Berechne Ladeliste (Knapsack)" algorithm="Knapsack" provider="ibm">
      <bpmn2:incoming>Flow_1k013oe</bpmn2:incoming>
      <bpmn2:outgoing>Flow_10t3293</bpmn2:outgoing>
    </quantme:quantumComputationTask>
    <bpmn2:sequenceFlow id="Flow_10t3293" sourceRef="QuantumComputationTask_1ye1vc6" targetRef="Gateway_13ii4j4" />
  </bpmn2:process>
  <bpmn2:message id="Message_0p4fck4" name="Message_0p4fck4" />
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">
      <bpmndi:BPMNShape id="Event_05npe3j_di" bpmnElement="Event_1pggtyp">
        <dc:Bounds x="1682" y="-88" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1b4qclx_di" bpmnElement="Activity_0ym5a6k">
        <dc:Bounds x="200" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0shivxz_di" bpmnElement="Activity_1l4kmzj">
        <dc:Bounds x="340" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0m4ys3g_di" bpmnElement="Activity_1almfwy">
        <dc:Bounds x="560" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_02jkzhy_di" bpmnElement="Activity_1s3b1zn">
        <dc:Bounds x="1540" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1f5tj95_di" bpmnElement="Activity_0yyvfyd">
        <dc:Bounds x="700" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_13m9t4g_di" bpmnElement="Gateway_13m9t4g" isMarkerVisible="true">
        <dc:Bounds x="1445" y="-95" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1436" y="-140" width="67" height="40" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1msdcd8_di" bpmnElement="Gateway_1msdcd8" isMarkerVisible="true">
        <dc:Bounds x="485" y="-95" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_1thnudz_di" bpmnElement="Gateway_1thnudz" isMarkerVisible="true">
        <dc:Bounds x="835" y="-95" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="817" y="-119" width="86" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_13ii4j4_di" bpmnElement="Gateway_13ii4j4" isMarkerVisible="true">
        <dc:Bounds x="945" y="-95" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_0t1eti7_di" bpmnElement="Activity_0vk7g32">
        <dc:Bounds x="1290" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="QuantumComputationTask_1wt6aa5_di" bpmnElement="Activity_0flh63m">
        <dc:Bounds x="1130" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_0c9ayc2" bpmnElement="QuantumComputationTask_1ye1vc6">
        <dc:Bounds x="920" y="0" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_0hhp0bd_di" bpmnElement="Gateway_0hhp0bd" isMarkerVisible="true">
        <dc:Bounds x="945" y="135" width="50" height="50" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="945" y="195" width="52" height="27" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1gzcg6z_di" bpmnElement="Activity_17231t1">
        <dc:Bounds x="1290" y="120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="QuantumComputationTask_16a5su1_di" bpmnElement="Activity_0wsvbf1">
        <dc:Bounds x="1150" y="120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_18hutpl" bpmnElement="Activity_1eml1us">
        <dc:Bounds x="1020" y="120" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Gateway_10itye2_di" bpmnElement="Gateway_10itye2" isMarkerVisible="true">
        <dc:Bounds x="1315" y="245" width="50" height="50" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Event_1sbcn11_di" bpmnElement="Event_0a9vpcu">
        <dc:Bounds x="-10" y="-88" width="36" height="36" />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="Activity_1ndyzuy_di" bpmnElement="Activity_1wtxplz">
        <dc:Bounds x="60" y="-110" width="100" height="80" />
        <bpmndi:BPMNLabel />
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="Flow_0k45o2v_di" bpmnElement="Flow_0k45o2v">
        <di:waypoint x="160" y="-70" />
        <di:waypoint x="200" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1o0job9_di" bpmnElement="Flow_1o0job9">
        <di:waypoint x="300" y="-70" />
        <di:waypoint x="340" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_19sigyl_di" bpmnElement="Flow_19sigyl">
        <di:waypoint x="1640" y="-70" />
        <di:waypoint x="1682" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0ey4t8g_di" bpmnElement="Flow_0ey4t8g">
        <di:waypoint x="800" y="-70" />
        <di:waypoint x="835" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1uk996u_di" bpmnElement="Flow_1uk996u">
        <di:waypoint x="660" y="-70" />
        <di:waypoint x="700" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1lgu2v0_di" bpmnElement="Flow_1lgu2v0">
        <di:waypoint x="1495" y="-70" />
        <di:waypoint x="1540" y="-70" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1498" y="-88" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1mglfkn_di" bpmnElement="Flow_1mglfkn">
        <di:waypoint x="1470" y="-45" />
        <di:waypoint x="1470" y="270" />
        <di:waypoint x="1365" y="270" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="1484" y="-39" width="12" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_164r496_di" bpmnElement="Flow_164r496">
        <di:waypoint x="535" y="-70" />
        <di:waypoint x="560" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0pqisjm_di" bpmnElement="Flow_0pqisjm">
        <di:waypoint x="440" y="-70" />
        <di:waypoint x="485" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_03ixpie_di" bpmnElement="Flow_03ixpie">
        <di:waypoint x="1315" y="270" />
        <di:waypoint x="510" y="270" />
        <di:waypoint x="510" y="-45" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0wg476a_di" bpmnElement="Flow_0wg476a">
        <di:waypoint x="885" y="-70" />
        <di:waypoint x="945" y="-70" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="890" y="-88" width="12" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1d4o5uw_di" bpmnElement="Flow_1d4o5uw">
        <di:waypoint x="860" y="-45" />
        <di:waypoint x="860" y="160" />
        <di:waypoint x="945" y="160" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="868" y="-39" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_08svt2n_di" bpmnElement="Flow_08svt2n">
        <di:waypoint x="1390" y="-70" />
        <di:waypoint x="1445" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1m1hkm4_di" bpmnElement="Flow_1m1hkm4">
        <di:waypoint x="995" y="-70" />
        <di:waypoint x="1130" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0t1933o_di" bpmnElement="Flow_0t1933o">
        <di:waypoint x="1230" y="-70" />
        <di:waypoint x="1290" y="-70" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_10t3293_di" bpmnElement="Flow_10t3293">
        <di:waypoint x="970" y="0" />
        <di:waypoint x="970" y="-45" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1k013oe_di" bpmnElement="Flow_1k013oe">
        <di:waypoint x="970" y="135" />
        <di:waypoint x="970" y="80" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="974" y="103" width="23" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0kiekyo_di" bpmnElement="Flow_0kiekyo">
        <di:waypoint x="1340" y="200" />
        <di:waypoint x="1340" y="245" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_0awxqtp_di" bpmnElement="Flow_0awxqtp">
        <di:waypoint x="995" y="160" />
        <di:waypoint x="1020" y="160" />
        <bpmndi:BPMNLabel>
          <dc:Bounds x="994" y="142" width="12" height="14" />
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_1gu7ma8_di" bpmnElement="Flow_1gu7ma8">
        <di:waypoint x="1250" y="160" />
        <di:waypoint x="1290" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_12pjp7k_di" bpmnElement="Flow_12pjp7k">
        <di:waypoint x="1120" y="160" />
        <di:waypoint x="1150" y="160" />
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="Flow_036tksd_di" bpmnElement="Flow_036tksd">
        <di:waypoint x="26" y="-70" />
        <di:waypoint x="60" y="-70" />
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn2:definitions>
